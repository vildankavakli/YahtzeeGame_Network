/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client;

import Server.ScoreCalculator;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.lang.reflect.Array;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class GameGUI extends javax.swing.JFrame {

    int selectedRow = -1;
    int selectedColumn = -1;
    int category;
    int score;
    private Server.Dice[] dices = new Server.Dice[5];
    private ClientConnection connection;
    private int currentTurnIndex = 0; // kimin sırası
    private int myPlayerIndex = 0; // bu client'ın oyuncu numarası
    private int rollCount = 0;
    private DefaultTableModel scoreTableModel;
    private StringBuilder gameOverSummary = new StringBuilder();

    /**
     * Creates new form GameGUI
     */
    public GameGUI() {
        initComponents();

        rollButton.setEnabled(false);
        sendButton.setEnabled(false);

        updateLabel(1, dice1);
        updateLabel(2, dice2);
        updateLabel(3, dice3);
        updateLabel(4, dice4);
        updateLabel(5, dice5);

        scoreTableModel = (DefaultTableModel) scoreTable1.getModel();

        try {
            connection = new ClientConnection("ec2-16-171-175-101.eu-north-1.compute.amazonaws.com", 12345, this); // Veya IP adresi: "13.61.33.151"
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sunucuya bağlanılamadı!", "Hata", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (connection != null) {
                    connection.sendMessage("QUIT"); // Sunucuya çıkış mesajı gönder
                }
                System.exit(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scoreTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();
        dice2 = new javax.swing.JLabel();
        dice3 = new javax.swing.JLabel();
        dice4 = new javax.swing.JLabel();
        dice5 = new javax.swing.JLabel();
        d1 = new javax.swing.JToggleButton();
        d2 = new javax.swing.JToggleButton();
        d3 = new javax.swing.JToggleButton();
        d4 = new javax.swing.JToggleButton();
        d5 = new javax.swing.JToggleButton();
        rollButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        dice1 = new javax.swing.JLabel();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 0, 0));

        scoreTable1.setBackground(new java.awt.Color(255, 255, 255));
        scoreTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scoreTable1.setForeground(new java.awt.Color(102, 0, 0));
        scoreTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Oyuncu 1", "Oyuncu 2"
            }
        ));
        scoreTable1.setColumnSelectionAllowed(true);
        scoreTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        scoreTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scoreTable1.setShowGrid(true);
        scoreTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scoreTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(scoreTable1);
        scoreTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("YAHTZEE");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));
        jLabel1.setOpaque(true);

        categoryTable.setBackground(new java.awt.Color(255, 255, 255));
        categoryTable.setForeground(new java.awt.Color(102, 0, 0));
        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Player Name"},
                {"Ones"},
                {"Twos"},
                {"Threes"},
                {"Fours"},
                {"Fives"},
                {"Sixes"},
                {"Three of a Kind"},
                {"Four of a Kind"},
                {"Small Straight"},
                {"Large Straight"},
                {"Full House"},
                {"Chance"},
                {"Yahtzee"},
                {"TOTAL SCORE"}
            },
            new String [] {
                "Kategoriler"
            }
        ));
        categoryTable.setToolTipText("");
        categoryTable.setShowGrid(true);
        jScrollPane2.setViewportView(categoryTable);

        dice2.setBackground(new java.awt.Color(0, 0, 0));
        dice2.setForeground(new java.awt.Color(255, 255, 255));
        dice2.setText("jLabel3");
        dice2.setOpaque(true);

        dice3.setBackground(new java.awt.Color(0, 0, 0));
        dice3.setText("jLabel4");
        dice3.setOpaque(true);

        dice4.setBackground(new java.awt.Color(0, 0, 0));
        dice4.setText("jLabel5");
        dice4.setOpaque(true);

        dice5.setBackground(new java.awt.Color(0, 0, 0));
        dice5.setText("jLabel6");
        dice5.setOpaque(true);

        d1.setBackground(new java.awt.Color(204, 204, 204));
        d1.setForeground(new java.awt.Color(0, 0, 0));
        d1.setText("...");
        d1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d1ActionPerformed(evt);
            }
        });

        d2.setBackground(new java.awt.Color(204, 204, 204));
        d2.setForeground(new java.awt.Color(0, 0, 0));
        d2.setText("...");
        d2.setToolTipText("...");
        d2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d2ActionPerformed(evt);
            }
        });

        d3.setBackground(new java.awt.Color(204, 204, 204));
        d3.setForeground(new java.awt.Color(0, 0, 0));
        d3.setText("...");
        d3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d3ActionPerformed(evt);
            }
        });

        d4.setBackground(new java.awt.Color(204, 204, 204));
        d4.setForeground(new java.awt.Color(0, 0, 0));
        d4.setText("...");
        d4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d4ActionPerformed(evt);
            }
        });

        d5.setBackground(new java.awt.Color(204, 204, 204));
        d5.setForeground(new java.awt.Color(0, 0, 0));
        d5.setText("...");
        d5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d5ActionPerformed(evt);
            }
        });

        rollButton.setBackground(new java.awt.Color(204, 204, 204));
        rollButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        rollButton.setForeground(new java.awt.Color(102, 0, 0));
        rollButton.setText("ZAR AT");
        rollButton.setPreferredSize(new java.awt.Dimension(104, 28));
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButtonActionPerformed(evt);
            }
        });

        sendButton.setBackground(new java.awt.Color(204, 204, 204));
        sendButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        sendButton.setForeground(new java.awt.Color(102, 0, 0));
        sendButton.setText("GÖNDER");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        dice1.setBackground(new java.awt.Color(0, 0, 0));
        dice1.setForeground(new java.awt.Color(255, 255, 255));
        dice1.setText("jLabel2");
        dice1.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(dice1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dice2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dice3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dice4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dice5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rollButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(d1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(d2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(d3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(d4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(d5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dice3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(d3)
                    .addComponent(d4)
                    .addComponent(d5)
                    .addComponent(d2)
                    .addComponent(d1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(rollButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void setMyPlayerIndex(int index) {
        myPlayerIndex = index;
        System.out.println("Bu istemcinin oyuncu indeksi: " + myPlayerIndex);
    }

    public void setConnection(ClientConnection connection) {
        this.connection = connection;
    }

    public int getMyPlayerIndex() {
        return myPlayerIndex;
    }

    protected void updateLabel(int value, javax.swing.JLabel label) {
        ImageIcon icon = new ImageIcon("C:\\Users\\user\\OneDrive\\Belgeler\\NetBeansProjects\\NetworkProject\\src\\main\\java\\Zarlar\\dice" + value + ".jpg");
        Image fotograf = icon.getImage();
        Image newimg = fotograf.getScaledInstance(40, 40, java.awt.Image.SCALE_SMOOTH);
        icon = new ImageIcon(newimg);
        label.setIcon(icon);
        label.setText(null);
    }

    public void updateDice(int[] values) {
        JLabel[] diceLabels = {dice1, dice2, dice3, dice4, dice5};
        for (int i = 0; i < 5; i++) {
            if (dices[i] == null) {
                dices[i] = new Server.Dice();
            }
            dices[i].setValue(values[i]);
            updateLabel(values[i], diceLabels[i]);
            diceLabels[i].setEnabled(true);
        }
    }

    public void updateTurn(int index) {
        currentTurnIndex = index;
        rollCount = 0;
        boolean myTurn = (index == myPlayerIndex);

        rollButton.setEnabled(myTurn); // sadece kendi sırasıysa zar atabilir
        sendButton.setEnabled(myTurn); // sadece kendi sırasıysa skor gönderebilir

        JToggleButton[] toggleButtons = {d1, d2, d3, d4, d5};
        JLabel[] diceLabels = {dice1, dice2, dice3, dice4, dice5};

        for (int i = 0; i < 5; i++) {
            toggleButtons[i].setSelected(false);
            diceLabels[i].setEnabled(true);
        }

        if (myTurn) {
            JOptionPane.showMessageDialog(this, "Sıra Sizde! Zar atmak için 'ZAR AT' butonuna basın.");
        } else {
            // Oyuncu indeksleri 0'dan başladığı için 1 ekleyerek gösteriyoruz
            JOptionPane.showMessageDialog(this, "Sıradaki oyuncu: Oyuncu " + (currentTurnIndex + 1) + ". Lütfen bekleyin.");
        }
        // Seçili skor hücresini de sıfırlayabiliriz
        selectedRow = -1;
        selectedColumn = -1;
    }

    public void showGameOverSummary() {
        gameOverSummary = new StringBuilder("Oyun Sonu Sonuçları:\n"); // Özetin başlangıcını ayarla
        // Tüm eski mesajları temizle veya yeni bir pencere aç
        // Şu anki JOptionPane'ı göstermeden önce hazır olmasını bekleyeceğiz.
    }

    // GUI'yi yeni bir oyun için sıfırlayan metot
    public void resetGUIForNewGameRequest() {
        SwingUtilities.invokeLater(() -> {
            // Zar görsellerini varsayılan hale getir
            updateLabel(1, dice1);
            updateLabel(2, dice2);
            updateLabel(3, dice3);
            updateLabel(4, dice4);
            updateLabel(5, dice5);

            // Zar tutma butonlarını serbest bırak
            d1.setSelected(false);
            d2.setSelected(false);
            d3.setSelected(false);
            d4.setSelected(false);
            d5.setSelected(false);

            // Zar atma sayacını sıfırla
            rollCount = 0;

            // Butonları devre dışı bırak (oyun başlayana kadar)
            rollButton.setEnabled(false);
            sendButton.setEnabled(false);

            int rowCount = scoreTableModel.getRowCount();
            int columnCount = scoreTableModel.getColumnCount();

            // Her satır ve her sütunu dolaş
            // İlk sütunu (kategori isimleri) atlamak için column = 1'den başla
            for (int row = 0; row < rowCount; row++) {
                for (int col = 0; col < columnCount; col++) {
                    scoreTableModel.setValueAt("", row, col); // Hücre değerini boş string yap
                }
            }

            System.out.println("GameGUI sıfırlandı, yeni oyun bekleniyor.");
        });
    }

    // Oyun sonu mesajlarını (her oyuncunun skoru, kazanan) toplamak için
    public void addGameOverMessage(String message) {
        if (gameOverSummary != null) {
            gameOverSummary.append(message).append("\n");
            // Eğer "Kazanan" veya "Oyun berabere" mesajı geldiyse, özeti göster ve tekrar oyna sorusunu sor
            if (message.startsWith("Kazanan:") || message.startsWith("Oyun berabere bitti!")) {
                SwingUtilities.invokeLater(() -> {
                    // Oyun bitti mesajını göster
                    JOptionPane.showMessageDialog(this, gameOverSummary.toString(), "Oyun Bitti!", JOptionPane.INFORMATION_MESSAGE);

                    // Kontrolleri devre dışı bırak
                    disableGameControls();

                    // Tekrar oynamak isteyip istemediğini sor
                    int response = JOptionPane.showConfirmDialog(this,
                            "Tekrar oynamak ister misiniz?", "Yeni Oyun",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (response == JOptionPane.YES_OPTION) {
                        // Evet ise sunucuya RESTART mesajı gönder
                        if (connection != null) {
                            connection.sendMessage("RESTART");
                            resetGUIForNewGameRequest();//?
                        }

                    } else {
                        // Hayır ise sunucuya QUIT mesajı gönder ve uygulamayı kapat
                        if (connection != null) {
                            connection.sendMessage("QUIT");
                        }
                        // Uygulamayı tamamen kapat
                        System.exit(0);
                    }
                });
            }
        }
    }

    // Oyun kontrollerini devre dışı bırakacak (örneğin butonları gri yapacak) metot
    private void disableGameControls() {
        rollButton.setEnabled(false);
        sendButton.setEnabled(false);
        // Tüm zar toggle butonlarını da devre dışı bırak
        JToggleButton[] toggleButtons = {d1, d2, d3, d4, d5};
        for (JToggleButton tb : toggleButtons) {
            tb.setEnabled(false);
        }
        // Kategori tablosunu da etkisiz hale getirebilirsiniz
        categoryTable.setEnabled(false);

    }

    private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed

        if (currentTurnIndex != myPlayerIndex) {
            JOptionPane.showMessageDialog(this, "Sıra sizde değil!");
            return;
        }

        if (rollCount >= 3) {
            JOptionPane.showMessageDialog(this, "3 kez zar attınız. Artık puanınızı seçin");
            rollButton.setEnabled(false);
            return;
        }
        JToggleButton[] toggleButtons = {d1, d2, d3, d4, d5};
        StringBuilder heldIndices = new StringBuilder();

        // Hangi zarların tutulduğunu belirle ve sunucuya göndermek için string oluştur
        for (int i = 0; i < 5; i++) {
            if (toggleButtons[i].isSelected()) {
                // Tutulan zarların indekslerini kaydet (0-4 arası)
                if (heldIndices.length() > 0) {
                    heldIndices.append(",");
                }
                heldIndices.append(i);
            }
        }

        connection.sendMessage("ROLL" + (heldIndices.length() > 0 ? ":" + heldIndices.toString() : ""));

        rollCount++;

        if (rollCount >= 3) {
            rollButton.setEnabled(false);
        }

    }//GEN-LAST:event_rollButtonActionPerformed

    // Sınıf seviyesinde bir değişken ile kaçıncı oyuncuyu ekleyeceğimizi takip etmek faydalı olabilir.
// Örneğin: private int nextPlayerColumn = 0; // Eğer oyuncu adları sütunlarda ise
    

    private void scoreTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scoreTable1MouseClicked
        if (currentTurnIndex != myPlayerIndex) {
            JOptionPane.showMessageDialog(this, "Sıra sizde değil. Skor seçimi yapamazsınız.");
            selectedRow = -1; // Seçimi sıfırla
            selectedColumn = -1;
            return;
        }

        int row = scoreTable1.rowAtPoint(evt.getPoint());
        int col = scoreTable1.columnAtPoint(evt.getPoint());

        if (row > 0 && col >= 0 && col < scoreTableModel.getColumnCount()) {
            if (col == myPlayerIndex) {
                Object cellValue = scoreTableModel.getValueAt(row, col);
                if (cellValue == null || cellValue.toString().trim().isEmpty() || cellValue.toString().equals("0")) {
                    selectedRow = row;
                    selectedColumn = col;
                    
                    if (dices[0] != null) {
                        int[] diceValues = new int[5];
                        for (int i = 0; i < 5; i++) {
                            diceValues[i] = dices[i].getValue();
                        }
                        String category = categoryTable.getValueAt(selectedRow, 0).toString().toLowerCase();
                        
                        
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Bu kategori zaten kullanıldı. Lütfen başka bir kategori seçin.");
                    selectedRow = -1; // Seçimi sıfırla
                    selectedColumn = -1;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Sadece kendi sütununuza skor girebilirsiniz.");
                selectedRow = -1; // Seçimi sıfırla
                selectedColumn = -1;
            }
        } else {
            selectedRow = -1; // Seçimi sıfırla
            selectedColumn = -1;
        }


    }//GEN-LAST:event_scoreTable1MouseClicked

    public void addScoreIfNotUsed(int row, int col, int score) {
        Object cellValue = scoreTableModel.getValueAt(row, col);
        if (cellValue == null || cellValue.toString().trim().isEmpty() || cellValue.toString().equals("0") || (Integer.toString(score).equals(cellValue.toString()))) {
            scoreTableModel.setValueAt(score, row, col);
            System.out.println("Skor tablosu güncellendi: [" + row + "," + col + "] -> " + score);
        } else {
            System.out.println("Hücre [" + row + "," + col + "] zaten dolu (" + cellValue + "), sunucudan gelen güncelleme atlandı.");
        }
    }

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (currentTurnIndex != myPlayerIndex) {
            JOptionPane.showMessageDialog(this, "Sıra sizde değil!");
            return;
        }

        if (selectedRow == -1 || selectedColumn == -1 || selectedRow == 0) {
            JOptionPane.showMessageDialog(this, "Lütfen skorunuzu yazmak istediğiniz bir kategori seçin.");
            return;
        }

        if (selectedColumn != myPlayerIndex) {
            JOptionPane.showMessageDialog(this, "Sadece kendi sütununuza skor gönderebilirsiniz.");
            selectedRow = -1; // Seçimi sıfırla
            selectedColumn = -1;
            return;
        }

        Object cellValue = scoreTableModel.getValueAt(selectedRow, selectedColumn);
        if (cellValue != null && !cellValue.toString().trim().isEmpty() && !cellValue.toString().equals("0")) {
            JOptionPane.showMessageDialog(this, "Bu kategori zaten kullanıldı. Lütfen başka bir kategori seçin.");
            selectedRow = -1; // Seçimi sıfırla
            selectedColumn = -1;
            return;
        }

        // Mevcut zar değerlerini al
        int[] diceValues = new int[5];
        for (int i = 0; i < 5; i++) {
            // Zarların atılmış olduğundan emin ol (zar at butonu kullanılmış olmalı)
            if (dices[i] != null) {
                diceValues[i] = dices[i].getValue();
            } else {
                JOptionPane.showMessageDialog(this, "Zarlar henüz atılmadı veya bir hata oluştu.");
                return; // Zarlar olmadan skor gönderilemez
            }
        }

        // Seçilen kategori adını al
        String category = categoryTable.getValueAt(selectedRow, 0).toString().toLowerCase();

        // Zar değerlerini string formatına çevir
        StringBuilder sb = new StringBuilder();
        for (int val : diceValues) {
            sb.append(val).append(" ");
        }

        // Sunucuya "MOVE" komutu ile kategori, zar değerleri, seçilen satır ve sütun bilgilerini gönder
        // Sunucu bu bilgileri alıp skoru hesaplayacak, geçerliliğini kontrol edecek ve tabloyu güncelleyecek.
        if (connection != null) {
            // Yeni format: MOVE:kategori:zar1 zar2 zar3 zar4 zar5:satirIndeksi:sutunIndeksi
            connection.sendMessage("MOVE:" + category + ":" + sb.toString().trim() + ":" + selectedRow + ":" + selectedColumn);
        }

        // Hamle gönderildikten sonra butonları devre dışı bırak.
        // Sıra değiştiğinde updateTurn metodu bu butonları yeniden yönetecek.
        rollButton.setEnabled(false);
        sendButton.setEnabled(false);

        // Seçili skor hücresini sıfırla
        selectedRow = -1;
        selectedColumn = -1;


    }//GEN-LAST:event_sendButtonActionPerformed

    private void d1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d1ActionPerformed
        if (d1.isSelected()) {
            dice1.setEnabled(false);
        } else {
            dice1.setEnabled(true);
        }
    }//GEN-LAST:event_d1ActionPerformed

    private void d2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d2ActionPerformed
        if (d2.isSelected()) {
            dice2.setEnabled(false);
        } else {
            dice2.setEnabled(true);
        }
    }//GEN-LAST:event_d2ActionPerformed

    private void d3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d3ActionPerformed
        if (d3.isSelected()) {
            dice3.setEnabled(false);
        } else {
            dice3.setEnabled(true);
        }
    }//GEN-LAST:event_d3ActionPerformed

    private void d4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d4ActionPerformed
        if (d4.isSelected()) {
            dice4.setEnabled(false);
        } else {
            dice4.setEnabled(true);
        }
    }//GEN-LAST:event_d4ActionPerformed

    private void d5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d5ActionPerformed
        if (d5.isSelected()) {
            dice5.setEnabled(false);
        } else {
            dice5.setEnabled(true);
        }
    }//GEN-LAST:event_d5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable categoryTable;
    private javax.swing.JToggleButton d1;
    private javax.swing.JToggleButton d2;
    private javax.swing.JToggleButton d3;
    private javax.swing.JToggleButton d4;
    private javax.swing.JToggleButton d5;
    private javax.swing.JLabel dice1;
    private javax.swing.JLabel dice2;
    private javax.swing.JLabel dice3;
    private javax.swing.JLabel dice4;
    private javax.swing.JLabel dice5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JButton rollButton;
    private javax.swing.JTable scoreTable1;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
